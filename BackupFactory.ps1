<#
.SYNOPSIS
Backs up the backup files in a ZIP file on the Satisfactory dedicated server

.DESCRIPTION
Simple script to backup anywhere Satifactory Backup :)
Any questions go to https://satisfactory.fandom.com/wiki/Dedicated_servers for answers.

.PARAMETER SaveGamesPath
[Mandatory, except if you use -Auto] Indicate where the .sav files generated by the Satisfactory dedicated server are located. Depending on the installation mode and manual launch mode versus service mode, the folder may change! In: %LOCALAPPDATA%\FactoryGame\Saved\SaveGames
or In: C:\Windows\System32\config\systemprofile\AppData\Local\FactoryGame\Saved\SaveGames\server
Or: C:\Windows\ServiceProfiles\NetworkService\AppData\Local\FactoryGame\Saved\SaveGames\server

.PARAMETER BackupPath
[Mandatory, except if you use -Auto] Save the ZIP file in the local directory.

.PARAMETER Auto
If you hard-write the "SaveGamesPath" and "BackupPath" variable in the script, use -auto as the script argument.

.PARAMETER CreateTask
[Require Administrator PowerShell Terminal] Option that will create a task in the task scheduler so that the script restarts every hour.

.PARAMETER RemoveTask
[Require Administrator PowerShell Terminal] Option that will remove a task in the task scheduler.

.PARAMETER Clean
By "default" check backup folder and remove files olders than 30 Days 

.INPUTS
None. You cannot pipe objects to BackupFactory.ps1.

.OUTPUTS
BackupFactory.ps1 generate minimal information output.

.NOTES
You can use this script for your local games too if you want.
whane you create task, added all argument if you want.
But don't input together RemoveTask and Createtask :D   
You can input only -CreateTask or -RemoveTask or -Clean for ru scrpit with already in used.
You have many instances ? Copy and Rename script whith instance name and change all variables in section 'HERE VARIABLES'  

.EXAMPLE
PS> .\BackupFactory.ps1 -Auto -Clean

.EXAMPLE
PS> .\BackupFactory.ps1 -SaveGamesPath $env:USERPROFILE\AppData\Local\FactoryGame\Saved\SaveGames\server -BackupPath F:\BackupFactory

.EXAMPLE
PS> .\BackupFactory.ps1 -CreateTask -Auto -Clean -Verbose

.EXAMPLE
PS> .\BackupFactory.ps1 -RemoveTask

.EXAMPLE
PS> .\BackupFactory.ps1 -Clean

#>
[CmdletBinding()]
param ([Parameter(Position=0)]
[switch]$Auto,
[string]$SaveGamesPath,
[string]$BackupPath,
[switch]$CreateTask,
[switch]$RemoveTask,
[switch]$Clean)

function Get-MyFile {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]$file
    )
            If (Test-Path $file) { 
                Write-Log "File $file : OK" Information
            } else {
                Write-Log "File $file not found at this location" Warning
            exit 1
        }
    }

function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string]$Message,
        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('Information','Warning','Error')]
        [string]$Severity = 'Information'
    )
    [pscustomobject]@{
        Time = (Get-Date -f g)
        Severity = $Severity
        Message = $Message
    } | Export-Csv -Path "$LogFile" -Append -NoTypeInformation
    switch ([string]$Severity) {
        Error   { Write-Error "$Severity - $Message"  }
        Warning { Write-Warning "$Severity - $Message"}
        Default { Write-Verbose "$Message"}
    }
}

function Verifypathstobackupandsave {
    if ((Test-Path $SaveGamesPath) -and (Test-Path $BackupPath)) {
        Write-Log "Paths OK" Information
    } else {
        Write-Log "Path missing or failed, verify path -SaveGamesPath -BackupPath exist. `nFor -auto option, Please verify paths in the script" Warning
        exit 1
    }
}

function StartSatifactBackCleaner{
    Write-Log "Remove older $DaysRemoveFiles days backup files" Information
    $limit = (Get-Date).AddDays(-$DaysRemoveFiles)
    try {
    Get-ChildItem -Path "$BackupPath\BackupSatisfactory-*.zip" -Recurse -Force | Where-Object { !$_.PSIsContainer -and $_.CreationTime -lt $limit } | Remove-Item -Force
    } catch {
    Write-Log "Erase older files failed ! Look why..." Information
    Write-Error "$_"
    }
}

function set-mytaskSheduler{
    [CmdletBinding()]
    param (
    [switch]$Create,
    [switch]$Remove)
    if ($Remove.IsPresent) {
        try { 
            Write-Log "Try to Remove Task $TaskName" Information
            Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
        } catch {
            Write-Log "Failed to Remove Task $TaskName" Error
            Write-Error $_
            exit 1
        }
        Write-Host "Remove Task $TaskName"
        exit
    }
    if ($Create.IsPresent) {
        if (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
        { Write-Log "Adminsitrator ik OK" Information }
        Else { Write-warning "Start Powershell as Administrator and run this script again"
        exit 1}
        $fullpath = $(Join-Path -ChildPath $scriptName -Path $PWD)
        if ($Auto.IsPresent) {
            Write-Log "-Auto are present and added" Information
            $arguments='-Auto'
        } else {
            Write-Log "-SaveGamesPath -BackupPath are present and added" Information
            Verifypathstobackupandsave
            $arguments="-SaveGamesPath $SaveGamesPath -BackupPath $BackupPath" 
        }
        if ($Clean.IsPresent) {
            Write-Log "Clean are present and added" Information
            $arguments = $arguments+" -Clean"
        }
        Write-Log "Path used : $fullpath" Information
        $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-WindowStyle Hidden $fullpath $arguments"
        $trigger = New-ScheduledTaskTrigger -RepetitionInterval (New-TimeSpan -Minutes $RepeatInMinutes) -At $(Get-Date).ToString('hh:mm:ss tt') -Once 
        $settings = New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable
        $STPrin = New-ScheduledTaskPrincipal -UserId "LOCALSERVICE" -LogonType ServiceAccount
        try {
            Write-Log "Try to create Task fo $scriptName in path $PWD" Information
            Register-ScheduledTask -Action $action -Trigger $trigger -TaskPath $TaskPath -TaskName $TaskName -Description $Description -Settings $settings -Principal $STPrin
        } catch {
            Write-Log "Failed to create Task for $scriptName in path $PWD" Information
            Write-Error $_
            exit 1
        }
        $InformationTimeToStart = $($(Get-ScheduledTask -TaskName $TaskName).Triggers).StartBoundary
        write-Log "Start at $InformationTimeToStart" Information
        write-Host "Start at $InformationTimeToStart" 
    }
}

###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
# HERE VARIABLES Change server backup file ! 
$SaveGamesPathCustomized="C:\Users\$env:USERPROFILE\AppData\Local\FactoryGame\Saved\SaveGames\server"
# HERE VARIABLES Change place to be a backup file !
$BackupPathCustomized="F:\Test"
# HERE VARIABLES Change Folder for Windows Scheduler !
$TaskPath="SatisfactoryTask"
# HERE VARIABLES Change Name Task for Windows Scheduler !
$TaskName="Backup Satisfactory 2"
# HERE VARIABLES Change Description for Windows Scheduler !
$Description="Automated backup script for Satisfactory"
# HERE VARIABLES Change Minutes repetition for Windows Scheduler !
$RepeatInMinutes = "60"
# HERE VARIABLES Change numbers of days olders for remove files !
$DaysRemoveFiles = "30"
###########################################################
###########################################################
###########################################################
###########################################################
###########################################################
$LogFolder=$(Get-Location).path
$MonInvocation.MyCommand  # Récupération du nom du script pour transcript
$scriptName = $MyInvocation.MyCommand.Name
$LogFile = $LogFolder+'\'+$scriptName+'.log'  # Log les informations du script
Write-Log "Log File in $LogFile" Information
if ($RemoveTask.IsPresent) {set-mytaskSheduler -Remove}

if ($Auto.IsPresent) {
    Write-Log '-SaveGamesPath and -BackupPath as not set use internal variable' Information
    $SaveGamesPath=$SaveGamesPathCustomized
    $BackupPath=$BackupPathCustomized
}
if ($CreateTask.IsPresent) {set-mytaskSheduler -Create}
# check if all paths is good ! 
Verifypathstobackupandsave
$DestinationZipPath = "$BackupPath\BackupSatisfactory-$(get-date -f yyyyMMdd-HH.mm).zip"
$compress = @{
    Path = $SaveGamesPath+"\"+"*.sav"
    CompressionLevel = "Fastest"
    DestinationPath = $DestinationZipPath
}
Write-Log "Compress all saved files to $DestinationPath"
try {
    Compress-Archive @compress 
} catch {
    Write-Log "Error on compress" Error
    Write-Error $_
}
Get-MyFile -File $DestinationZipPath
if ($Clean.IsPresent) {
    Write-Log 'Cleaner are enabled' Information
    StartSatifactBackCleaner
} 